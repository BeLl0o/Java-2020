super关键字
1）在子类中访问父类的成员变量和方法 
super.成员变量  
super.成员方法([实参列表])
2）在子类构造方法中调用父类的构造方法
super([参数列表])
----------------------------------------------------------------------------------------
final关键字
①final修饰的类不能被继承
②final修饰的类不能被子类重写
③final修饰的变量是常量，初始化后不能再被修改
   ···final修饰的变量不会自动被JVM初始化，只能利用构造方法初始化或者在声明时就初始化
----------------------------------------------------------------------------------------
abstract关键字
意义：方法的方法体由该类的子类根据实际需求去实现
抽象方法：用~~~修饰的方法，是一个不完整的方法，只有方法的声明没有方法体（即在没有方法体时只有声明没有实现）
抽象类：用~~~修饰的类，抽象类可以不包含任何抽象方法
！！！抽象类不能被实例化（new创建对象），必须通过子类继承抽象类去实现抽象方法
    *具体子类必须实现所继承抽象类的全部抽象方法，否则子类也要声明为抽象类
    *抽象方法不能用static/final/private关键字修饰
----------------------------------------------------------------------------------------
interface关键字
接口：引用类型，全局常量和抽象方法的集合，可被看作引用类型。
    每个接口都被编译成独立的字节码文件
1）接口的声明
interface 接口名{
    String name;//全局变量声明，默认类型为 static final 
    void say(); //抽象方法声明，默认声明为 public static
}
2）接口的实现
class 类名 implements 接口列表{
    属性和方法
}
3）接口的继承
interface 接口名 extends 接口列表{
    全局变量声明
    抽象方法声明
}
----------------------------------------------------------------------------------------
多态
    原理：<同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果>
    定义：指把类中具有相似功能的不同方法使用同一个方法名实现，从而可以使用相同的方式来调用这些具有不同功能的同名方法
*Java中引用变量
    ①声明类型：变量声明时被指定的类型
    ②实际类型：被变量引用的数据类型
***动态绑定机制原理：
    当调用java实例方法时，JVM从该变量的实际类型开始，沿着继承链向上查找到该方法的实现直到找到为止，并调用首次找到的实现。
    ->JVM在运行动态绑定机制的实现时，是由变量的实际类型决定的
